fw_config
	field WIFI 3 4
		option WIFI_CNVI_WIFI6E		0
		option WIFI_PCIE_WIFI7		1
		option WIFI_UNKNOWN		2
	end
	field THERMAL 9 9
		option THERMAL_6W 		0
		option THERMAL_15W		1
	end
	field FP 10 10
		option FP_ABSENT		0
		option FP_PRESENT		1
	end
end

chip soc/intel/alderlake
	register "sagv" = "SaGv_Enabled"

	# SOC Aux orientation override:
	# This is a bitfield that corresponds to up to 4 TCSS ports.
	# Bits (0,1) allocated for TCSS Port1 configuration and Bits (2,3)for TCSS Port2.
	# TcssAuxOri = 0100b
	# Bit0 set to "0" indicates has retimer on USBC Port0, on the DB.
	# Bit2 set to "1" indicates no retimer on USBC Port1, on the MB.
	# Bit1,Bit3 set to "0" indicates Aux lines are not swapped on the
	# motherboard to USBC connector
	register "tcss_aux_ori" = "5"

	register "typec_aux_bias_pads[0]" = "{
		.pad_auxp_dc = GPP_E22,
		.pad_auxn_dc = GPP_E23
	}"

	register "typec_aux_bias_pads[1]" = "{
		.pad_auxp_dc = GPP_A21,
		.pad_auxn_dc = GPP_A22
	}"

	# FIVR configurations for rull are disabled since the board doesn't have V1p05 and Vnn
	# bypass rails implemented.
	register "ext_fivr_settings" = "{
		.configure_ext_fivr = 0,
	}"

	# Enable the Cnvi BT Audio Offload
	register "cnvi_bt_audio_offload" = "1"

	# Intel Common SoC Config
	#+-------------+------------------------------+
	#| Field        |  Value                        |
	#+-------------+------------------------------+
	#| gspi0       | Touchscreen                        |
	#| gspi1       | Fingerprint MCU                        |
	#| I2C0        | TPM. Early init is                |
	#|             | required to set up a BAR        |
	#|             | for TPM communication        |
	#| I2C3        | Audio                        |
	#| I2C5        | Trackpad                        |
	#+-------------+------------------------------+
	register "common_soc_config" = "{
		.i2c[0] = {
			.early_init = 1,
			.speed = I2C_SPEED_FAST_PLUS,
			.speed_config[0] = {
				.speed = I2C_SPEED_FAST_PLUS,
				.scl_lcnt = 55,
				.scl_hcnt = 30,
				.sda_hold = 7,
			}
		},
		.i2c[3] = {
			.speed = I2C_SPEED_FAST,
			.speed_config[0] = {
				.speed = I2C_SPEED_FAST,
				.scl_lcnt = 157,
				.scl_hcnt = 79,
				.sda_hold = 7,
			}
		},
		.i2c[5] = {
			.speed = I2C_SPEED_FAST,
			.speed_config[0] = {
				.speed = I2C_SPEED_FAST,
				.scl_lcnt = 152,
				.scl_hcnt = 79,
				.sda_hold = 7,
			}
		},
	}"

	register "serial_io_gspi_mode" = "{
		[PchSerialIoIndexGSPI0] = PchSerialIoPci,
		[PchSerialIoIndexGSPI1] = PchSerialIoPci,
	}"

	# Power limit config
	register "power_limits_config[ADL_N_041_6W_CORE]" = "{
			.tdp_pl1_override = 15,
			.tdp_pl2_override = 25,
			.tdp_pl4 = 78,
	}"

	device domain 0 on
		device ref dtt on
			chip drivers/intel/dptf
				## sensor information
				register "options.tsr[0].desc" = ""CPU_VR""
				register "options.tsr[1].desc" = ""CPU""
				register "options.tsr[2].desc" = ""Ambient""
				register "options.tsr[3].desc" = ""Charger""

				# TODO: below values are initial reference values only
				## Passive Policy
				register "policies.passive" = "{
					[0] = DPTF_PASSIVE(CPU,	CPU,	85, 6000),
					[1] = DPTF_PASSIVE(CPU,	TEMP_SENSOR_0,	85, 6000),
					[2] = DPTF_PASSIVE(CPU,	TEMP_SENSOR_1,	85, 6000),
					[3] = DPTF_PASSIVE(CPU,	TEMP_SENSOR_2,	85, 5000),
					[4] = DPTF_PASSIVE(CHARGER,	TEMP_SENSOR_3,	85, 6000),
				}"

				## Critical Policy
				register "policies.critical" = "{
					[0] = DPTF_CRITICAL(TEMP_SENSOR_1,	90,	SHUTDOWN),
					[1] = DPTF_CRITICAL(TEMP_SENSOR_2,	90,	SHUTDOWN),
				}"

				register "controls.power_limits" = "{
					.pl1 = {
							.min_power = 6000,
							.max_power = 6000,
							.time_window_min = 28 * MSECS_PER_SEC,
							.time_window_max = 32 * MSECS_PER_SEC,
							.granularity = 200
						},
					.pl2 = {
							.min_power = 25000,
							.max_power = 25000,
							.time_window_min = 28 * MSECS_PER_SEC,
							.time_window_max = 32 * MSECS_PER_SEC,
							.granularity = 1000
						}
				}"

				## Charger Performance Control (Control, mA)
				register "controls.charger_perf" = "{
						[0] = { 255, 3000 },
						[1] = {  24, 1500 },
						[2] = {  16, 1000 },
						[3] = {   8,  500 }
				}"

				## Fan Performance Control (Percent, Speed, Noise, Power)
				register "controls.fan_perf" = "{
						[0] = {  90, 4734, 220, 1640, },
						[1] = {  80, 4443, 180, 1310, },
						[2] = {  70, 4108, 145, 1030, },
						[3] = {  60, 3752, 115, 765, },
						[4] = {  50, 3352,  90,  545, },
						[5] = {  40, 2897,  55,  365, },
						[6] = {  30, 2363,  30,  220, },
						[7] = {  20, 1752,  15,  120, },
						[8] = {  10,  918,  10,  60, },
						[9] = {   0,    0,   0,   50, }
				}"

				## Fan options
				register "options.fan.fine_grained_control" = "1"
				register "options.fan.step_size" = "2"
				device generic 0 on
					probe THERMAL THERMAL_6W
				end
			end

			chip drivers/intel/dptf
				## sensor information
				register "options.tsr[0].desc" = ""CPU_VR""
				register "options.tsr[1].desc" = ""CPU""
				register "options.tsr[2].desc" = ""Ambient""
				register "options.tsr[3].desc" = ""Charger""

				# TODO: below values are initial reference values only
				## Active Policy
				register "policies.active" = "{
					[0] = {
						.target = DPTF_TEMP_SENSOR_0,
						.thresholds = {
								TEMP_PCT(85, 90),
								TEMP_PCT(54, 64),
								TEMP_PCT(52, 52),
								TEMP_PCT(50, 44),
								TEMP_PCT(48, 38),
								TEMP_PCT(45, 34),
						}
					},
					[1] = {
						.target = DPTF_TEMP_SENSOR_1,
						.thresholds = {
								TEMP_PCT(75, 90),
								TEMP_PCT(70, 80),
								TEMP_PCT(65, 70),
								TEMP_PCT(60, 60),
								TEMP_PCT(55, 50),
								TEMP_PCT(50, 40),
						}
					},
					[2] = {
						.target = DPTF_TEMP_SENSOR_2,
						.thresholds = {
								TEMP_PCT(90, 90),
								TEMP_PCT(85, 80),
								TEMP_PCT(75, 70),
								TEMP_PCT(70, 50),
						}
					},
					[3] = {
						.target = DPTF_TEMP_SENSOR_3,
						.thresholds = {
								TEMP_PCT(80, 90),
								TEMP_PCT(75, 80),
								TEMP_PCT(70, 70),
								TEMP_PCT(65, 50),
						}
					}
				}"
				## Passive Policy
				register "policies.passive" = "{
					[0] = DPTF_PASSIVE(CPU,	CPU,	85,	6000),
					[1] = DPTF_PASSIVE(CPU,	TEMP_SENSOR_0,	85,	6000),
					[2] = DPTF_PASSIVE(CPU,	TEMP_SENSOR_1,	85,	6000),
					[3] = DPTF_PASSIVE(CPU,	TEMP_SENSOR_2,	85,	6000),
					[4] = DPTF_PASSIVE(CHARGER,	TEMP_SENSOR_3,	85,	6000),
				}"

				## Critical Policy
				register "policies.critical" = "{
					[0] = DPTF_CRITICAL(TEMP_SENSOR_1,	90,	SHUTDOWN),
					[1] = DPTF_CRITICAL(TEMP_SENSOR_2,	90,	SHUTDOWN),
				}"

				register "controls.power_limits" = "{
					.pl1 = {
							.min_power = 15000,
							.max_power = 15000,
							.time_window_min = 28 * MSECS_PER_SEC,
							.time_window_max = 32 * MSECS_PER_SEC,
							.granularity = 200
						},
					.pl2 = {
							.min_power = 35000,
							.max_power = 35000,
							.time_window_min = 28 * MSECS_PER_SEC,
							.time_window_max = 32 * MSECS_PER_SEC,
							.granularity = 1000
						}
				}"

				## Charger Performance Control (Control, mA)
				register "controls.charger_perf" = "{
					[0] = { 255, 3000 },
					[1] = {  24, 2000 },
					[2] = {  16, 1000 },
					[3] = {   8,  500 }
				}"

				## Fan Performance Control (Percent, Speed, Noise, Power)
				register "controls.fan_perf" = "{
					[0] = {  100, 4000, 220, 1640, },
					[1] = {  90, 3700, 220, 1640, },
					[2] = {  80, 3500, 180, 1310, },
					[3] = {  70, 3300, 145, 1030, },
					[4] = {  60, 3100, 115, 765, },
					[5] = {  50, 2800,  90,  545, },
					[6] = {  40, 2500,  55,  365, },
					[7] = {  30, 2100,  30,  220, },
					[8] = {  20, 1500,  15,  120, },
					[9] = {   0,    0,   0,   50, }
				}"

				## Fan options
				register "options.fan.fine_grained_control" = "1"
				register "options.fan.step_size" = "2"
				device generic 1 on
					probe THERMAL THERMAL_15W
				end
			end
		end
		device ref ish on
			chip drivers/intel/ish
				register "add_acpi_dma_property" = "true"
				device generic 0 on end
			end
			probe STORAGE STORAGE_UFS
		end
		device ref ufs on
			probe STORAGE STORAGE_UFS
		end
		device ref igpu on
			chip drivers/gfx/generic
				register "device_count" = "4"
				# DDIA for eDP
				register "device[0].name" = ""LCD0""
				# Internal panel on the first port of the graphics chip
				register "device[0].type" = "panel"
				# DDIB for HDMI
				# If HDMI is not enumerated in the kernel, then no GFX device should be added for DDIB
				register "device[1].name" = ""DD01""
				# TCP0 (DP-1) for port C0
				register "device[2].name" = ""DD02""
				register "device[2].use_pld" = "true"
				register "device[2].pld" = "ACPI_PLD_TYPE_C(LEFT, RIGHT, ACPI_PLD_GROUP(1, 1))"
				# TCP1 (DP-2) for port C1
				register "device[3].name" = ""DD03""
				register "device[3].use_pld" = "true"
				register "device[3].pld" = "ACPI_PLD_TYPE_C(RIGHT, LEFT, ACPI_PLD_GROUP(2, 1))"
				device generic 0 on end
			end
		end
		device ref i2c3 on
			chip drivers/i2c/generic
				register "hid" = ""RTL5682""
				register "name" = ""RT58""
				register "desc" = ""Headset Codec""
				register "irq_gpio" = "ACPI_GPIO_IRQ_EDGE_BOTH(GPP_A23)"
				# Set the jd_src to RT5668_JD1 for jack detection
				register "property_count" = "1"
				register "property_list[0].type" = "ACPI_DP_TYPE_INTEGER"
				register "property_list[0].name" = ""realtek,jd-src""
				register "property_list[0].integer" = "1"
				device i2c 1a on end
			 end
			chip drivers/generic/alc1015
				register "hid" = ""RTL1019""
				register "sdb" =  "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_A11)"
				device generic 0 on end
			end
		end
		device ref i2c5 on
			chip drivers/i2c/generic
				register "hid" = ""ELAN0000""
				register "desc" = ""ELAN Touchpad""
				register "irq" = "ACPI_IRQ_WAKE_LEVEL_LOW(GPP_F14_IRQ)"
				register "wake" = "GPE0_DW2_14"
				register "detect" = "1"
				device i2c 0x15 on end
			end
			chip drivers/i2c/hid
				register "generic.hid" = ""FTCS0038""
				register "generic.cid" = ""PNP0C50""
				register "generic.desc" = ""Focal Touchpad""
				register "generic.irq" = "ACPI_IRQ_WAKE_LEVEL_LOW(GPP_F14_IRQ)"
				register "generic.wake" = "GPE0_DW2_14"
				register "generic.detect" = "1"
				register "hid_desc_reg_offset" = "0x20"
				device i2c 0x38 on end
			end
		end
		device ref cnvi_wifi on
			chip drivers/wifi/generic
				register "wake" = "GPE0_PME_B0"
				register "enable_cnvi_ddr_rfim" = "true"
				register "add_acpi_dma_property" = "true"
				device generic 0 on end
			end
			probe WIFI WIFI_CNVI_WIFI6E
			probe WIFI WIFI_UNKNOWN
		end
		device ref pcie_rp4 on
			# PCIe 4 WLAN
			register "pch_pcie_rp[PCH_RP(4)]" = "{
				.clk_src = 2,
				.clk_req = 2,
				.flags = PCIE_RP_LTR | PCIE_RP_AER,
			}"
			chip drivers/wifi/generic
				register "wake" = "GPE0_DW1_03"
				register "add_acpi_dma_property" = "true"
				device pci 00.0 on end
			end
			chip soc/intel/common/block/pcie/rtd3
				# # enable_gpio is controlled by the EC with EC_EN_PP3300_WLAN
				register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_B11)"
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_H20)"
				register "srcclk_pin" = "2"
				device generic 0 on end
			end
			probe WIFI WIFI_PCIE_WIFI7
			probe WIFI WIFI_UNKNOWN
		end
		device ref pch_espi on
			chip ec/google/chromeec
				use conn0 as mux_conn[0]
				use conn1 as mux_conn[1]
				device pnp 0c09.0 on end
			end
		end
		device ref pmc hidden
			chip drivers/intel/pmc_mux
				device generic 0 on
					chip drivers/intel/pmc_mux/conn
						use usb2_port1 as usb2_port
						use tcss_usb3_port2 as usb3_port
						device generic 0 alias conn0 on end
					end
					chip drivers/intel/pmc_mux/conn
						use usb2_port2 as usb2_port
						use tcss_usb3_port1 as usb3_port
						device generic 1 alias conn1 on end
					end
				end
			end
		end
		device ref tcss_xhci on
			chip drivers/usb/acpi
				device ref tcss_root_hub on
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-C Port C0 (MLB)""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "use_custom_pld" = "true"
						register "custom_pld" = "ACPI_PLD_TYPE_C(LEFT, LEFT, ACPI_PLD_GROUP(1, 1))"
						device ref tcss_usb3_port2 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-C Port C1 (DB)""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "use_custom_pld" = "true"
						register "custom_pld" = "ACPI_PLD_TYPE_C(RIGHT, RIGHT, ACPI_PLD_GROUP(2, 1))"
						device ref tcss_usb3_port1 on end
					end
				end
			end
		end
		device ref xhci on
			register "usb2_ports[0]" = "USB2_PORT_TYPE_C(OC_SKIP)"        # Type-C MB (7.5 inch)
			register "usb2_ports[1]" = "USB2_PORT_TYPE_C(OC_SKIP)"        # Type-C DB (7.1 inch)
			register "usb2_ports[2]" = "USB2_PORT_MID(OC_SKIP)"                # Type-A MB (6.4 inch)
			register "usb2_ports[3]" = "USB2_PORT_MID(OC_SKIP)"                # Type-A DB (6.2 inch)
			register "usb2_ports[4]" = "USB2_PORT_SHORT(OC_SKIP)"        # LTE (3.3 inch)
			register "usb2_ports[5]" = "USB2_PORT_SHORT(OC_SKIP)"        # UFC (3.7 inch)
			register "usb2_ports[7]" = "USB2_PORT_MID(OC_SKIP)"        # Bluetooth port for PCIe WLAN (2.5 inch)
			register "usb2_ports[9]" = "USB2_PORT_MID(OC_SKIP)"        # Bluetooth port for CNVi WLAN

			register "usb3_ports[0]" = "USB3_PORT_DEFAULT(OC_SKIP)"        # USB3 Type-A port A0(MLB)
			register "usb3_ports[1]" = "USB3_PORT_DEFAULT(OC_SKIP)"        # USB3 Type-A port A1(DB)
			register "usb3_ports[2]" = "USB3_PORT_DEFAULT(OC_SKIP)"        # USB3 WWAN(LTE)
			chip drivers/usb/acpi
				device ref xhci_root_hub on
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-C Port C0 (MLB)""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "use_custom_pld" = "true"
						register "custom_pld" = "ACPI_PLD_TYPE_C(LEFT, LEFT, ACPI_PLD_GROUP(1, 1))"
						device ref usb2_port1 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-C Port C1 (DB)""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "use_custom_pld" = "true"
						register "custom_pld" = "ACPI_PLD_TYPE_C(RIGHT, RIGHT, ACPI_PLD_GROUP(2, 1))"
						device ref usb2_port2 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-A Port A0 (MLB)""
						register "type" = "UPC_TYPE_A"
						register "use_custom_pld" = "true"
						register "custom_pld" = "ACPI_PLD_TYPE_A(LEFT, RIGHT, ACPI_PLD_GROUP(3, 1))"
						device ref usb2_port3 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-A Port A1 (DB)""
						register "type" = "UPC_TYPE_A"
						register "use_custom_pld" = "true"
						register "custom_pld" = "ACPI_PLD_TYPE_A(RIGHT, LEFT, ACPI_PLD_GROUP(4, 1))"
						device ref usb2_port4 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 LTE""
						register "type" = "UPC_TYPE_INTERNAL"
						device ref usb2_port5 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 UFC""
						register "type" = "UPC_TYPE_INTERNAL"
						device ref usb2_port6 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""PCIe Bluetooth""
						register "type" = "UPC_TYPE_INTERNAL"
						register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_D4)"
						device ref usb2_port8 on
							probe WIFI WIFI_PCIE_WIFI7
							probe WIFI WIFI_UNKNOWN
						end
					end
					chip drivers/usb/acpi
						register "desc" = ""CNVi Bluetooth""
						register "type" = "UPC_TYPE_INTERNAL"
						register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_D4)"
						device ref usb2_port10 on
							probe WIFI WIFI_CNVI_WIFI6E
							probe WIFI WIFI_UNKNOWN
						end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-A Port A0 (MLB)""
						register "type" = "UPC_TYPE_USB3_A"
						register "use_custom_pld" = "true"
						register "custom_pld" = "ACPI_PLD_TYPE_A(LEFT, RIGHT, ACPI_PLD_GROUP(3, 1))"
						device ref usb3_port1 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-A Port A1 (DB)""
						register "type" = "UPC_TYPE_USB3_A"
						register "use_custom_pld" = "true"
						register "custom_pld" = "ACPI_PLD_TYPE_A(RIGHT, LEFT, ACPI_PLD_GROUP(4, 1))"
						device ref usb3_port2 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 WWAN""
						register "type" = "UPC_TYPE_INTERNAL"
						device ref usb3_port3 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 WLAN""
						register "type" = "UPC_TYPE_INTERNAL"
						device ref usb3_port4 on end
					end
				end
			end
		end
		device ref pcie_rp7 on
			# Enable SD Card PCIE 7 using clk 3
			register "pch_pcie_rp[PCH_RP(7)]" = "{
				.clk_src = 3,
				.clk_req = 3,
				.flags = PCIE_RP_HOTPLUG | PCIE_RP_LTR | PCIE_RP_AER,
			}"
			chip soc/intel/common/block/pcie/rtd3
				register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_H13)"
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_H12)"
				register "srcclk_pin" = "3"
				device generic 0 on end
			end
		end        #PCIE7 SD card
		device ref pcie_rp9 off end
		device ref hda on
			chip drivers/sof
				register "spkr_tplg" = "rt1019"
				register "jack_tplg" = "rt5682"
				register "mic_tplg" = "_2ch_pdm0"
				device generic 0 on end
			 end
		end
		device ref gspi0 on
			chip drivers/spi/acpi
				register "name" = ""GTP0""
				register "hid" = ""GXTS7986""
				register "uid" = "0x3"
				register "irq" = "ACPI_IRQ_WAKE_EDGE_LOW(GPP_C7_IRQ)"
				register "speed" = "9 * MHz"
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_C1)"
				register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_C0)"
				register "property_count" = "1"
				register "property_list[0].type" = "ACPI_DP_TYPE_INTEGER"
				register "property_list[0].name" = ""goodix,hid-report-addr""
				register "property_list[0].integer" = "0x22c8c"
				device spi 0 on end
			end # touchscreen
		end
		device ref gspi1 on
			chip drivers/spi/acpi
				register "name" = ""CRFP""
				register "hid" = "ACPI_DT_NAMESPACE_HID"
				register "uid" = "1"
				register "compat_string" = ""google,cros-ec-spi""
				register "irq" = "ACPI_IRQ_WAKE_LEVEL_LOW(GPP_F15_IRQ)"
				register "wake" = "GPE0_DW2_15"
				register "has_power_resource" = "1"
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_E7)"
				register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_D2)"
				register "enable_delay_ms" = "3"
				device spi 0 on
					probe FP FP_PRESENT
				end
			end # FPMCU
		end
	end
end
